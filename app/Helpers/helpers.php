<?php

use App\Exceptions\GeneralException;
use App\Helpers\uuid;
use App\Http\Utilities\SendEmail;
use App\Models\Access\Role\Role;
use App\Models\Client\Client;
use App\Models\Notification\Notification;
use App\Models\Settings\Setting;
use Carbon\Carbon as Carbon;

/**
 * Henerate UUID.
 *
 * @return uuid
 */

function generateUuid() {
	return uuid::uuid4();
}

if (!function_exists('homeRoute')) {

	/**
	 * Return the route to the "home" page depending on authentication/authorization status.
	 *
	 * @return string
	 */
	function homeRoute() {
		if (access()->allow('view-backend')) {
			return 'admin.dashboard';
		} elseif (auth()->check()) {
			return 'frontend.user.dashboard';
		}

		return 'frontend.index';
	}

}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {

	/**
	 * Helper to grab the application name.
	 *
	 * @return mixed
	 */
	function app_name() {
		return config('app.name');
	}

}

if (!function_exists('access')) {

	/**
	 * Access (lol) the Access:: facade as a simple function.
	 */
	function access() {
		return app('access');
	}

}

if (!function_exists('history')) {

	/**
	 * Access the history facade anywhere.
	 */
	function history() {
		return app('history');
	}

}

if (!function_exists('gravatar')) {

	/**
	 * Access the gravatar helper.
	 */
	function gravatar() {
		return app('gravatar');
	}

}

if (!function_exists('includeRouteFiles')) {

	/**
	 * Loops through a folder and requires all PHP files
	 * Searches sub-directories as well.
	 *
	 * @param $folder
	 */
	function includeRouteFiles($folder) {
		$directory      = $folder;
		$handle         = opendir($directory);
		$directory_list = [$directory];

		while (false !== ($filename = readdir($handle))) {
			if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
				array_push($directory_list, $directory.$filename.'/');
			}
		}

		foreach ($directory_list as $directory) {
			foreach (glob($directory.'*.php') as $filename) {
				require $filename;
			}
		}
	}

}

if (!function_exists('getRtlCss')) {

	/**
	 * The path being passed is generated by Laravel Mix manifest file
	 * The webpack plugin takes the css filenames and appends rtl before the .css extension
	 * So we take the original and place that in and send back the path.
	 *
	 * @param $path
	 *
	 * @return string
	 */
	function getRtlCss($path) {
		$path     = explode('/', $path);
		$filename = end($path);
		array_pop($path);
		$filename = rtrim($filename, '.css');

		return implode('/', $path).'/'.$filename.'.rtl.css';
	}

}

if (!function_exists('settings')) {

	/**
	 * Access the settings helper.
	 */
	function settings() {
		// Settings Details
		$settings = Setting::latest()->first();
		if (!empty($settings)) {
			return $settings;
		}
	}

}

// Creating Notification
if (!function_exists('createNotification')) {

	/**
	 * create new notification.
	 *
	 * @param  $message    message you want to show in notification
	 * @param  $userId     To Whom You Want To send Notification
	 * @param  $type       type of notification (1 - dashboard, 2 - email, 3 - both) (by default 1)
	 * @param  $option     associate array [ 'data' => $data, 'email_template_type' => $template_type ]
	 *
	 * @return object
	 */
	function createNotification($message, $userId, $type = 1, $options = []) {

		if ($type == 1 || $type == 3) {
			$notification = new Notification();

			return $notification->insert([
					'message'    => $message,
					'user_id'    => $userId,
					'type'       => $type,
					'created_at' => Carbon::now(),
				]);
		}
		if ($type == 10) {
			if (!empty($options['data']) && !empty($options['email_template_type'])) {
				$mail        = new SendEmail();
				$emailResult = $mail->sendWithTemplate($options['data'], $options['email_template_type']);
			} else {
				throw new GeneralException('Invalid input given.option array shold contains data and email_template_type');
			}
		}
		if ($type == 11) {

			if (!empty($options['data']) && !empty($options['email_template_type'])) {
				$mail        = new SendEmail();
				$emailResult = $mail->sendWithTemplate($options['data'], $options['email_template_type']);
			} else {
				throw new GeneralException("Invalid input given.option array shold contains data and email_template_type");

			}
		}
		if ($type == 12) {
			if (!empty($options['data']) && !empty($options['email_template_type'])) {
				$mail        = new SendEmail();
				$emailResult = $mail->sendWithTemplate($options['data'],$options['email_template_type']);
			} else {
				throw new  GeneralException("Invalid input given.option array shold contains data and email_template_type");
			}
		}
		if ($type == 13) {

			if (!empty($options['data']) && !empty($options['email_template_type'])) {
				$mail        = new SendEmail();
				$emailResult = $mail->sendWithTemplate($options['data'], $options['email_template_type']);
			} else {
				throw new GeneralException("Invalid input given.option array shold contains data and email_template_type");
			}
		}
		if ($type == 2 || $type == 3 || $type == 5 || $type == 6 || $type == 7 || $type == 8 || $type == 9) {
			if (!empty($options['data']) && !empty($options['email_template_type'])) {
				$mail        = new SendEmail();
				$emailResult = $mail->sendWithTemplate($options['data'], $options['email_template_type']);
			} else {
				throw new GeneralException('Invalid input given.option array shold contains data and email_template_type');
			}
		}
	}

}

if (!function_exists('escapeSlashes')) {

	/**
	 * Access the escapeSlashes helper.
	 */
	function escapeSlashes($path) {
		$path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
		$path = str_replace('//', DIRECTORY_SEPARATOR, $path);
		$path = trim($path, DIRECTORY_SEPARATOR);

		return $path;
	}

}

if (!function_exists('getMenuItems')) {

	/**
	 * Converts items (json string) to array and return array.
	 */
	function getMenuItems($type = 'backend', $id = null) {
		$menu = new \App\Models\Menu\Menu();
		$menu = $menu->where('type', $type);
		if (!empty($id)) {
			$menu = $menu->where('id', $id);
		}
		$menu = $menu->first();
		if (!empty($menu) && !empty($menu->items)) {
			return json_decode($menu->items);
		}

		return [];
	}

}

if (!function_exists('getRouteUrl')) {

	/**
	 * Converts querystring params to array and use it as route params and returns URL.
	 */
	function getRouteUrl($url, $url_type = 'route', $separator = '?') {
		$routeUrl = '';
		if (!empty($url)) {
			if ($url_type == 'route') {
				if (strpos($url, $separator) !== false) {
					$urlArray = explode($separator, $url);
					$url      = $urlArray[0];
					parse_str($urlArray[1], $params);
					$routeUrl = route($url, $params);
				} else {
					$routeUrl = route($url);
				}
			} else {
				$routeUrl = $url;
			}
		}

		return $routeUrl;
	}

}

if (!function_exists('renderMenuItems')) {

	/**
	 * render sidebar menu items after permission check.
	 */
	function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item') {
		foreach ($items as $item) {
			// if(!empty($item->url) && !Route::has($item->url)) {
			//     return;
			// }
			if (!empty($item->view_permission_id)) {
				if (access()->allow($item->view_permission_id)) {
					echo view($viewName, compact('item'));
				}
			} else {
				echo view($viewName, compact('item'));
			}
		}
	}

}

if (!function_exists('isActiveMenuItem')) {

	/**
	 * checks if current URL is of current menu/sub-menu.
	 */
	function isActiveMenuItem($item, $separator = '?') {
		$item->clean_url = $item->url;
		if (strpos($item->url, $separator) !== false) {
			$item->clean_url = explode($separator, $item->url, -1);
		}
		if (Active::checkRoutePattern($item->clean_url)) {
			return true;
		}
		if (!empty($item->children)) {
			foreach ($item->children as $child) {
				$child->clean_url = $child->url;
				if (strpos($child->url, $separator) !== false) {
					$child->clean_url = explode($separator, $child->url, -1);
				}
				if (Active::checkRoutePattern($child->clean_url)) {
					return true;
				}
			}
		}

		return false;
	}

	/**
	 * Get Role Details
	 */
	if (!function_exists('getRoles')) {

		function getRoles() {
			$getRoleDetails = Role::
			leftjoin("role_user", "role_user.role_id", "=", "roles.id")
				->where(config('access.role_user_table').'.user_id', '=', access()->user()->id)
			                                                                           ->select(config('access.roles_table').'.id', config('access.roles_table').'.name')->first();
			return $getRoleDetails;
		}

	}
	/**
	 *
	 * get clients.
	 */
	if (!function_exists('getClients')) {

		function getClients() {
			$client = Client::where(config('module.clients.table').'.status', 1)
				->leftjoin(config('access.users_table'), config('module.clients.table').'.user_id', '=', config('access.users_table').'.id')
				->select(config('module.clients.table').'.id', config('access.users_table').'.id as user_id', config('access.users_table').'.first_name', config('access.users_table').'.last_name', config('access.users_table').'.email')
				->get()
				->toArray();
			return $client;
		}

	}

	/**
	 *
	 * common for session status.
	 * @param status $status.
	 * @return session status $status.
	 */
	if (!function_exists('sessionStatus')) {
		function sessionStatus($status) {
			$statusArr = trans('strings.backend.session_status');
			$status    = array_search($status, $statusArr);
			return $status;
		}
	}

	/**
	 *
	 * common for session status class.
	 * @param status $status.
	 * @return status class $statusClass.
	 */
	if (!function_exists('sessionStatusClass')) {
		function sessionStatusClass($status) {
			$statusArr   = trans('strings.backend.session_status');
			$classStatus = array_search($status, array_keys($statusArr));
			if ($classStatus == 1) {
				$classStatus = "success-block";
			} elseif ($classStatus == 2) {
				$classStatus = "status-block";
			} else {
				$classStatus = "status-block";
			}
			return $classStatus;
		}
	}
	/**
	 *
	 * generateChart
	 */
	if (!function_exists('generateChart')) {
		function generateChart($chart, $title, $xAxis, $yaxis, $legend, $plotOptions, $series, $attachmentData) {
			$chartJs       = trans('strings.backend.highchart_cdn.cdn');
			$generateChart = \Chart::chart($chart)->title($title)->xaxis($xAxis)->yaxis($yaxis)->legend($legend)->plotOptions($plotOptions)->series($series)->display();
			$chartData     = str_replace($chartJs, '', $generateChart);
			$substr        = 'credits:false';
			$chartResult   = str_replace($substr, $substr.$attachmentData, $chartData);
			return $chartResult;
		}
	}
	/**
	 * Script for intervention chart
	 *
	 * @param $title Title of cahrt.
	 * @param $maxSession Maximum number of session.
	 * @param $seriesData Series data into the chart.
	 * @param $drillDownData detail of session data for client wise.
	 * @param $sessionNumArr.
	 * @return $script of the generate chart.
	 */
	if (!function_exists('interventionChartScript')) {
		function interventionChartScript($title, $maxSession, $seriesData, $drillDownData, $sessionNumArr) {
			$script = '<script>
				Highcharts.chart("ss", {
    			chart: {
        				type: "bar"
    			},
    			title: {
        			text: "'.$title.'"
    			},
    			subtitle: {
        		text: "Click the bars to view assessment details"
    			},
    			xAxis: {
        			type: "category",
    			},
    			yAxis: {
        			title: {
            			text: "No of Assessments"
        			},
        			tickInterval:1,
        			max:'.$maxSession.',
        			categories:'.$sessionNumArr.'
    			},
    			legend: {
        			enabled: true
    			},
    			plotOptions: {
        			series: {
            			cursor: "pointer",
             			point: {
                			events: {
                    			click: function () {
                    				  /*window.open(window.location.origin+"/admin/managesessions/"+this.series.options.mydata[this.x]+"/views/details",			  "_blank");*/
                    				 if (this.series != null) {
                    				 	$(".modal-body").html(" ");
                    				 	$.ajax({
                    				 		url:window.location.origin+"/admin/reports/intervention/view",
                    				 		type:"POST",
                    				 		data:{"sessionId":this.series.options.mydata[this.x]},
                    				 		dataType:"JSON",
                    				 		success:function(response) {
                    				 		  $(".modal-body").html(response);
                    				 		}
                    				 	});
                    				 	 $("html").css("overflow","auto");
                    				 	$("#exampleModal").modal("show");
                    				 }
                    	}
                }
            },
            	borderWidth: 1,
            	dataLabels: {
                enabled: false,
            	}
        		}
    			},
    		"series": [
        	{
        		"showInLegend":false,
        		"enabled":false,
	            "name": "Client",
            	"colorByPoint": true,
            	"data":'.$seriesData.'
        	}
    		],
    		"drilldown": {
        		"series":'.$drillDownData.'
    		},
    		 tooltip: {
      		  headerFormat: "<span style=font-size:11px>{series.name}</span><br>",
        	  pointFormat: "<span style=color:{point.color}>{point.name}</span><br/>"
    		},
    		"exporting":{
    			"buttons":
    			{
    				"contextButton":
    				{
    					"menuItems":Highcharts.getOptions().exporting.buttons.contextButton.menuItems.slice(0,5)
    				}
    			}
   			 },
   			 credits: {
   			 enabled: false
  			}
		});
	</script>';
			return $script;
		}
	}
}
